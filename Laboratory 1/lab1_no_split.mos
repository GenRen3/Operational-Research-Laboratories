!@encoding CP1252

model "LTD"

uses "mmxprs"; !gain access to the Xpress-Optimizer solver





!sample declarations section

declarations

NODES = 1..5

DELTA: integer

b: array (NODES,NODES) of mpvar !decision variable

fsd: array(NODES,NODES,NODES,NODES) of mpvar !Flow source destination changes for "i" "j" "s" and "d" for all the configuration

f: array (NODES,NODES) of mpvar !Flow per a couple of "s" and "d" (for only one couple)

Obj: mpvar !The function that I will minimize

Tsd: array(NODES,NODES) of real !Traffic

Tstart: real !Time analysis

end-declarations





!Initialization of parameters

Tstart:= timestamp

DELTA:=4

setrandseed(4) !set a different seed for each running






!ggenerate a matrix of Uniform[6,12] numbers

forall(n,m in NODES | n <> m) do

  TRAFFIC(n,m):= 6+(random*(12-6))

  end-do





!We set the matrix as dimensions of NODES and withe 0 and 1 as only possible values (splitted or not)

!forall(i in NODES, j in NODES) b(i,j) is_binary

forall(i in NODES, j in NODES,s in NODES,d in NODES) fsd(s,d,i,j) is_binary !For splitting, change this line





!objective

MyFunct:=Obj

setparam("XPRS_MAXTIME",-300)


!constraints

forall(i in NODES) sum (j in NODES) b(i,j) <= DELTA !Maximum transmitter

forall(i in NODES) sum (j in NODES) b(j,i) <= DELTA !Maximum receiver

forall(s in NODES, d in NODES | s<>d) sum(j in NODES) fsd(s,d,s,j)=1 !Outgoing

forall(s in NODES, d in NODES | s<>d) sum(j in NODES) fsd(s,d,j,d)=1 !Ingoing

forall(s in NODES, d in NODES ) sum(j in NODES) fsd(s,d,d,j)=0 !

forall(s in NODES, d in NODES ) sum(j in NODES) fsd(s,d,j,s)=0 !

forall(i in NODES,j in NODES | i<>j) f(i,j) = sum(s in NODES, d in NODES | s<>d) TRAFFIC(s,d)*fsd(s,d,i,j)

forall(i in NODES,s in NODES, d in NODES | i<>s and i<>d and s<>d) sum(j in NODES) fsd(s,d,i,j) = sum(j in NODES) fsd(s,d,j,i)

!M = sum(s in NODES, d in NODES) TRAFFIC (s,d)

!forall(i in NODES, s in NODES ,d in NODES) fsd(i,j,s,d) <= M*b

forall(i in NODES, j in NODES | i<>j) f(i,j)<= Obj

forall(s in NODES, d in NODES, i in NODES, j in NODES | i<>j and s<>d) fsd(s,d,i,j)<=b(i,j)




!optimization statement

minimize(MyFunct)



!output satement

writeln("Objective value is ",getobjval,".")




end-model
