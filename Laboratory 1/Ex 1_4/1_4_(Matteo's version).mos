model "LTD_Formulation"
 
  uses "mmxprs"

  declarations
   Set = 1..16 !Nodes

   b : array(Set, Set) of mpvar !Decision variable
   fsd : array(Set, Set, Set, Set) of mpvar !Flow source destination changes for s d i and j all config
   f : array(Set, Set) of mpvar !Flow per a couple s d
   Obj : mpvar

   Tsd : array(Set, Set) of real !TRAFFIC from s to d
   Delta  : integer 
   Now : real
  end-declarations

  !Init of parameters
  Now := timestamp
  Delta := 4
  setrandseed(10) !set a different seed for each run

  !generate a matrixc of Uniform[1,10] numbers
  forall(n in Set, m in Set | n <> m) do
    Tsd(n,m) := 1+(random*(10-1)) !traffic
  end-do
  setparam("XPRS_MAXTIME", -180) 

  !Objective Function
  MyFunct := Obj

  !Constraints
  forall(i in Set) sum(j in Set) b(i, j) = Delta !Maximum number of transmitters
  forall(i in Set) sum(j in Set) b(j, i) = Delta !Maximum number of receivers
  forall(s in Set, d in Set|s<>d) sum(j in Set) fsd(s, d, s, j) = 1 !Outgoing traffic from the sources
  forall(s in Set, d in Set|s<>d) sum(j in Set) fsd(s, d, j, d) = 1 !Incoming traffinc into the destinations
  forall(s in Set, d in Set) sum(j in Set) fsd(s, d, j, s) = 0 !Incoming traffic into the sources
  forall(s in Set, d in Set) sum(j in Set) fsd(s, d, d, j) = 0 !Outgoing traffic from the destinations
  forall(i in Set, s in Set, d in Set | i <> s and i <> d) sum(j in Set) fsd(s, d, i, j) = sum(j in Set) fsd(s, d, j, i) !Transition equation
  forall(i in Set, j in Set) f(i, j) = sum(s in Set, d in Set) (Tsd(s, d)*fsd(s, d, i, j)) !Total traffic over each link not normalized
  forall(i in Set, j in Set) f(i, j) <= Obj !Obj is the maximum flow over the arcs
  forall(s in Set, d in Set, i in Set, j in Set) fsd(s, d, i, j) <= b(i, j) !Feasibility contraint
  
  !Grid topology ex 4
  forall(k in Set) do
  	!Vertical connection
  	if (k > 4) then
  		b(k,k-4) = 1
  	else
  		b(k,k+12)= 1	
  	end-if
  	!Horizontal connection
  	if ((k mod 4)<>0) then 
  		b(k,k+1) = 1 
  	else
  		b(k,k-3) = 1
  	end-if
  end-do
  
  !Binary Variables
  forall(i in Set, j in Set) b(i, j) is_binary
  !If we want to obtain one single path for every s-->d, the following constraint must be added:
  !forall(s in Set, d in Set, i in Set, j in Set) fsd(s, d, i, j) is_binary
  
  !Minimize or maximize the objective function:
  minimize(MyFunct)
  
  writeln("The minimum of the maximum flow passing through the network is: ", getobjval)
  writeln("Computation time:" , timestamp - Now , "s")

end-model